package com.qaautomationgurudatt.lib;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class UiGenericUtils 
{
	    public static WebDriver _webDriver;
	    private static WebDriverWait _wait;
	    
	    UiGenericUtils(WebDriver driver ,long timeOut)
	    {
	        _webDriver = driver;
	        _wait = new WebDriverWait(_webDriver, timeOut);
	    }
	    
	    public WebDriver getWebDriver() 
	    {
	    	return _webDriver;
	    }
	    
	    public void implicitlyWait() 
	    {
	    	_webDriver.manage().timeouts().implicitlyWait(UiConstants.IMPLICIT_TIMEOUT,
	    			TimeUnit.SECONDS);

	    }
	    
	    public void waitUntilElementToBeClickable(By by) 
	    {
		     _wait.until(ExpectedConditions.elementToBeClickable(by));   
		}
	    
	    public void goToUrl(String url) 
	    {
	    	_webDriver.get(url);
	    }
	    
	    public void click(By by)
	    {
	        WebElement element = getElementBy(by);
	        waitUntilElementToBeClickable(by);
	        element.click();
	    }
	    
	    public void  waitUntilElementVisible(By by) {
	    	_wait.until(ExpectedConditions.visibilityOfElementLocated(by));
	    }
	    
	    public WebElement getElementBy(By by) 
	    {
			return _webDriver.findElement(by);
	    }
	    
	    public void sendKeys(By by, String text) 
	    {
	    	waitUntilElementVisible(by);
	    	getElementBy(by).sendKeys(text);
	    }
	    
	    public String getTitle()
	    {
	       return _webDriver.getTitle();
	    }
	    
	    public void deleteAllCookies()
	    {
	        _webDriver.manage().deleteAllCookies();
	    }
	    
	    public void maximize() 
	    {
	    	_webDriver.manage().window().maximize();
	    }
		
	    public void hoverMouseOverWebElement(By element)
	    {
	        WebDriver driver = getWebDriver();
	        WebElement webElement = getElementBy(element);
	        waitUntilElementToBeClickable(element);
	        Actions action = new Actions(driver);
	        action.moveToElement(webElement).perform();
	    }
	    
	    public Set<String> getAllWindowHandles()
	    {
	    	return _webDriver.getWindowHandles();
	    }
	    
	    public String getCurrentWindowHandle()
	    {
	    	return _webDriver.getWindowHandle();
	    }
	    
	    public void backToPreviousWindow()
	    {
	         _webDriver.navigate().back();
	    }
	    
	    public void clickOnForwardWindow()
	    {
	    	_webDriver.navigate().forward();
	    }
	    
	    public void quitWebDriver()
	    {
	        _webDriver.quit();
	    }

	    public void closeWindow()
	    {
	        _webDriver.close();
	    }
	    
	    Boolean isElementDisplayed(By by) throws NoSuchElementException
	    {
	        WebElement element = getElementBy(by);
	        return element.isDisplayed();
	    }
	    
	    String getText(By by) 
	    {
	        WebElement element = getElementBy(by);
	        return element.getText();
	    }
	    
	    List<WebElement> getElementsBy(By by) 
	    {    
	        return _wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(by)); 
	    }
	    
	    boolean noSuchElement(By by)
	    {
	        return _webDriver.findElements(by).size() == 0;
	    }

	    WebDriver switchToWindow(String windowHandle)
	    {
	       return _webDriver.switchTo().window(windowHandle);
	    }
	    
	    WebDriver switchToWindow()
	    {
	        return switchToWindow(_webDriver.getWindowHandle());
	    }

	    WebDriver switchToWindowBasedOnPageTitle(String expectedPageTitle)
	    {
	    	Set<String> windowsHandles = _webDriver.getWindowHandles();

			for(String windowsHandle:windowsHandles)
			{
				String currentPageTitle = _webDriver.switchTo().window(windowsHandle).getTitle();				
				if(currentPageTitle.equals(expectedPageTitle) )
				{
					return _webDriver;		
				} 
			}
			return null;
	    }	 
	    
	    void hoverOnElement(By element)
	    {
	        WebDriver driver = getWebDriver();
	        WebElement webEl = getElementBy(element);
	        Actions action = new Actions(driver);
	        action.moveToElement(webEl).perform();
	    }
	    
	    void scrollToBottomOfPage()
	    {
	        JavascriptExecutor jsx = (JavascriptExecutor) _webDriver;
	        jsx.executeScript("window.scrollTo(0, document.body.scrollHeight)");
	    }

	    void scrollElement(By by)
	    {
	        JavascriptExecutor jse = (JavascriptExecutor) _webDriver;
	        jse.executeScript("arguments[0].scrollIntoView()", _webDriver.findElement(by));
	    }
}
