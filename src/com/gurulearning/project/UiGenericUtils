package com.qaautomationgurudatt.lib;

import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class UiGenericUtils 
{
	    public WebDriver webDriver;
	    private WebDriverWait wait;
	    
	    UiGenericUtils(WebDriver driver ,long timeOut)
	    {
	        webDriver = driver;
	        _wait = new WebDriverWait(webDriver, timeOut);
	    }
	    
	    public WebDriver getWebDriver() 
	    {
	    	return webDriver;
	    }
	    
	    public void implicitlyWait() 
	    {
	    	webDriver.manage().timeouts().implicitlyWait(UiConstants.IMPLICIT_TIMEOUT, TimeUnit.SECONDS);

	    }
	    
	    public void waitUntilElementToBeClickable(By by) 
	    {
		     wait.until(ExpectedConditions.elementToBeClickable(by));   
		}
	    
	    public void goToUrl(String url) 
	    {
	    	webDriver.get(url);
	    }
	    
	    public void click(By by)
	    {
	        WebElement element = getElementBy(by);
	        waitUntilElementToBeClickable(by);
	        element.click();
	    }
	    
	    public void  waitUntilElementVisible(By by) {
	    	_wait.until(ExpectedConditions.visibilityOfElementLocated(by));
	    }
	    
	    public WebElement getElementBy(By by) 
	    {
			return webDriver.findElement(by);
	    }
	    
	    public void sendKeys(By by, String text) 
	    {
	    	waitUntilElementVisible(by);
	    	getElementBy(by).sendKeys(text);
	    }
	    
	    public String getTitle()
	    {
	       return webDriver.getTitle();
	    }
	    
	    public void deleteAllCookies()
	    {
	        webDriver.manage().deleteAllCookies();
	    }
	    
	    public void maximize() 
	    {
	    	webDriver.manage().window().maximize();
	    }
		
	    public void hoverMouseOverWebElement(By element)
	    {
	        WebDriver driver = getWebDriver();
	        WebElement webElement = getElementBy(element);
	        waitUntilElementToBeClickable(element);
	        Actions action = new Actions(driver);
	        action.moveToElement(webElement).perform();
	    }
	    
	    public Set<String> getAllWindowHandles()
	    {
	    	return webDriver.getWindowHandles();
	    }
	    
	    public String getCurrentWindowHandle()
	    {
	    	return webDriver.getWindowHandle();
	    }
	    
	    public void backToPreviousWindow()
	    {
	         webDriver.navigate().back();
	    }
	    
	    public void clickOnForwardWindow()
	    {
	    	   webDriver.navigate().forward();
	    }
	    
	    public void quitWebDriver()
	    {
	        webDriver.quit();
	    }

	    public void closeWindow()
	    {
	        webDriver.close();
	    }
}
